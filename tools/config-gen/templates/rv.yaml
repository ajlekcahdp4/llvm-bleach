stack-pointer: X2
constant-registers:
  X0: 0x0000000000000000
register-classes:
  GPR: "X[0-9][0-9]?"
  FPR: "F[0-9][0-9]?_D"
instructions:
  FADD_D:
    func: |
      define i64 @FADD_D(i64 %0, i64 %1, i10 %rm) {
         %4 = bitcast i64 %0 to double
         %5 = bitcast i64 %1 to double
         %6 = fadd double %4, %5
         %7 = bitcast double %6 to i64
         ret i64 %7
      }
  FMUL_D:
    func: |
      define i64 @FMUL_D(i64 %0, i64 %1, i10 %rm) {
         %4 = bitcast i64 %0 to double
         %5 = bitcast i64 %1 to double
         %6 = fmul double %4, %5
         %7 = bitcast double %6 to i64
         ret i64 %7
      }
  FCVT_D_LU:
    func: |
      define i64 @FCVT_D_LU(i64 %0, i10 %rm) {
         %3 = sitofp i64 %0 to double
         %4 = bitcast double %3 to i64
         ret i64 %4
      }
  FMADD_D:
    func: |
      define i64 @FMADD_D(i64 %0, i64 %1, i64 %2, i10 %rm) {
         %4 = bitcast i64 %0 to double
         %5 = bitcast i64 %1 to double
         %6 = bitcast i64 %2 to double
         %7 = fmul double %4, %5
         %8 = fadd double %6, %7
         %9 = bitcast double %8 to i64
         ret i64 %9
      }
  SLT:
    func: |
      define i\xlen\ @SLT(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = icmp slt i\xlen\ %0, %1
        %4 = zext i1 %3 to i\xlen\
        ret i\xlen\ %4
      }
  SLTU:
    func: |
      define i\xlen\ @SLTU(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = icmp ult i\xlen\ %0, %1
        %4 = zext i1 %3 to i\xlen\
        ret i\xlen\ %4
      }
  AND:
    func: |
      define i\xlen\ @AND(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = and i\xlen\ %1, %0
        ret i\xlen\ %3
      }
  OR:
    func: |
      define i\xlen\ @OR(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = or i\xlen\ %1, %0
        ret i\xlen\ %3
      }
  XOR:
    func: |
      define i\xlen\ @XOR(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = xor i\xlen\ %1, %0
        ret i\xlen\ %3
      }
  SLL:
    func: |
      define i\xlen\ @SLL(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = and i\xlen\ %1, \xlen - 1\
        %4 = shl i\xlen\ %0, %3
        ret i\xlen\ %4
      }
  SLLW:
    requires: rv64
    func: |
      define i\xlen\ @SLLW(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = trunc i64 %1 to i32
        %4 = trunc i64 %0 to i32
        %5 = and i32 %4, 15
        %6 = shl i32 %3, %5
        %7 = sext i32 %6 to i64
        ret i64 %7
      }
  SRLW:
    requires: rv64
    func: |
      define i\xlen\ @SRLW(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = trunc i64 %1 to i32
        %4 = trunc i64 %0 to i32
        %5 = and i32 %4, 15
        %6 = lshr i32 %3, %5
        %7 = sext i32 %6 to i64
        ret i64 %7
      }
  SRAW:
    requires: rv64
    func: |
      define i\xlen\ @SRAW(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = trunc i64 %1 to i32
        %4 = trunc i64 %0 to i32
        %5 = and i32 %4, 15
        %6 = ashr i32 %3, %5
        %7 = sext i32 %6 to i64
        ret i64 %7
      }
  SLLI:
    func: |
      define i\xlen\ @SLLI(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = and i\xlen\ %1, \xlen - 1\
        %4 = shl i\xlen\ %0, %3
        ret i\xlen\ %4
      }
  SRL:
    func: |
      define i\xlen\ @SRL(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = and i\xlen\ %1, \xlen - 1\
        %4 = lshr i\xlen\ %0, %3
        ret i\xlen\ %4
      }
  SRA:
    func: |
      define i\xlen\ @SRA(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = and i\xlen\ %1, \xlen - 1\
        %4 = ashr i\xlen\ %0, %3
        ret i\xlen\ %4
      }
  SRLI:
    func: |
      define i\xlen\ @SRLI(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = and i\xlen\ %1, \xlen - 1\
        %4 = lshr i\xlen\ %0, %3
        ret i\xlen\ %4
      }
  SRAI:
    func: |
      define i\xlen\ @SRAI(i\xlen\ noundef %0, i\xlen\ noundef %1) {
        %3 = and i\xlen\ %1, \xlen - 1\
        %4 = ashr i\xlen\ %0, %3
        ret i\xlen\ %4
      }
  SLLIW:
    requires: rv64
    func: |
      define i64 @SLLIW(i64 noundef %0, i64 noundef %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = and i32 %4, 63
        %6 = shl i32 %3, %5
        %7 = sext i32 %6 to i64
        ret i64 %7
      }
  SRLIW:
    requires: rv64
    func: |
      define i64 @SRLIW(i64 noundef %0, i64 noundef %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = and i32 %4, 63
        %6 = lshr i32 %3, %5
        %7 = sext i32 %6 to i64
        ret i64 %7
      }
  SRAIW:
    requires: rv64
    func: |
      define i64 @SRAIW(i64 noundef %0, i64 noundef %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = and i32 %4, 63
        %6 = ashr i32 %3, %5
        %7 = sext i32 %6 to i64
        ret i64 %7
      }
  ADD:
    func: |
      define i\xlen\ @ADD(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = add i\xlen\ %1, %0
        ret i\xlen\ %3
      }
  SUB:
    func: |
      define i\xlen\ @SUB(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = sub i\xlen\ %0, %1
        ret i\xlen\ %3
      }
  SUBW:
    requires: rv64
    func: |
      define i64 @SUBW(i64 noundef signext %0, i64 noundef signext %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = sub i32 %3, %4
        %6 = sext i32 %5 to i64
        ret i64 %6
      }
  ADDW:
    requires: rv64
    func: |
      define i64 @ADDW(i64 noundef signext %0, i64 noundef signext %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = add i32 %3, %4
        %6 = sext i32 %5 to i64
        ret i64 %6
      }
  COPY:
    func: |
      define i\xlen\ @COPY(i\xlen\ noundef signext %0) {
        ret i\xlen\ %0
      }
  MULW:
    requires: rv64
    func: |
      define i64 @MULW(i64 %0, i64 %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = mul i32 %3, %4
        %6 = sext i32 %5 to i64
        ret i64 %6
      }
  MUL:
    func: |
      define signext i\xlen\ @MUL(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = mul i\xlen\ %0, %1
        ret i\xlen\ %3
      }
  MULH:
    requires: rv64
    func: |
      define i64 @MULH(i64 %0, i64 %1) {
        %3 = mul nsw i64 %0, %1
        %4 = lshr i64 %3, 32
        ret i64 %4
      }
  MULHU:
    requires: rv64
    func: |
      define i64 @MULHU(i64 %0, i64 %1) {
        %3 = mul i64 %0, %1
        %4 = lshr i64 %3, 32
        ret i64 %4
      }
  MULHSU:
    requires: rv64
    func: |
      define i64 @MULHSU(i64 %0, i64 %1) {
        %3 = mul i64 %0, %1
        %4 = lshr i64 %3, 32
        ret i64 %4
      }
  DIV:
    func: |
      define signext i\xlen\ @DIV(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = sdiv i\xlen\ %0, %1
        ret i\xlen\ %3
      }
  DIVW:
    requires: rv64
    func: |
      define i64 @DIVW(i64 %0, i64 %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = sdiv i32 %3, %4
        %6 = sext i32 %5 to i64
        ret i64 %6
      }
  DIVU:
    requires: rv64
    func: |
      define i64 @DIVU(i64 %0, i64 %1) {
        %3 = udiv i64 %0, %1
        ret i64 %3
      }
  DIVUW:
    requires: rv64
    func: |
      define i64 @DIVUW(i64 %0, i64 %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = udiv i32 %3, %4
        %6 = sext i32 %5 to i64
        ret i64 %6
      }
  REM:
    func: |
      define signext i\xlen\ @REM(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = srem i\xlen\ %0, %1
        ret i\xlen\ %3
      }
  REMW:
    requires: rv64
    func: |
      define i64 @REMW(i64 %0, i64 %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = srem i32 %3, %4
        %6 = sext i32 %5 to i64
        ret i64 %6
      }
  REMU:
    requires: rv64
    func: |
      define i64 @REMU(i64 %0, i64 %1) {
        %3 = urem i64 %0, %1
        ret i64 %3
      }
  REMUW:
    requires: rv64
    func: |
      define i64 @REMUW(i64 %0, i64 %1) {
        %3 = trunc i64 %0 to i32
        %4 = trunc i64 %1 to i32
        %5 = urem i32 %3, %4
        %6 = sext i32 %5 to i64
        ret i64 %6
      }
  LUI:
    func: |
      define signext i\xlen\ @LUI(i20 noundef signext %0) {
        %3 = zext i20 %0 to i\xlen\
        %4 = shl i\xlen\ %3, 12
        ret i\xlen\ %4
      }
  ADDI:
    func: |
      define signext i\xlen\ @ADDI(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = add i\xlen\ %0, %1
        ret i\xlen\ %3
      }
  ADDIW:
    requires: rv64
    func: |
      define signext i64 @ADDIW(i64 noundef signext %0, i64 noundef signext %1) {
        %3 = trunc i64 %1 to i32
        %4 = trunc i64 %0 to i32
        %5 = add i32 %3, %4
        %6 = sext i32 %5 to i64
        ret i64 %6
      }
  SD:
    requires: rv64
    func: |
      define void @SD(i64 %val, i64 %rs1, i64 %offset) {
        %3 = add i64 %rs1, %offset
        %4 = inttoptr i64 %3 to ptr
        store i64 %val, ptr %4, align 8
        ret void
      }
  LD:
    requires: rv64
    func: |
      define i64 @LD(i64 %rs1, i64 %offset) {
        %3 = add i64 %rs1, %offset
        %4 = inttoptr i64 %3 to ptr
        %5 = load i64, ptr %4
        ret i64 %5
      }
  SW:
    func: |
      define void @SW(i\xlen\ %val, i\xlen\ %rs1, i\xlen\ %offset) {
        %v = zext i32 -1 to i64
        %3 = and i64 %val, %v
        %4 = trunc i64 %val to i32
        %5 = add i\xlen\ %rs1, %offset
        %6 = inttoptr i\xlen\ %5 to ptr
        store i32 %4, ptr %6, align 4
        ret void
      }
  LW:
    func: |
      define i32 @LW(i\xlen\ %rs1, i\xlen\ %offset) {
        %3 = add i\xlen\ %rs1, %offset
        %4 = inttoptr i\xlen\ %3 to ptr
        %5 = load i32, ptr %4
        ret i32 %5
      }
  C_JR:
    is_return: [X1]
  JALR:
    is_return: [X0, X1, 0]
  BNE:
    func: |
      define i1 @BNE(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = icmp ne i\xlen\ %0, %1
        ret i1 %3
      }
  BEQ:
    func: |
      define i1 @BEQ(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = icmp eq i\xlen\ %0, %1
        ret i1 %3
      }
  BLT:
    func: |
      define i1 @BLT(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = icmp slt i\xlen\ %0, %1
        ret i1 %3
      }
  BGT:
    func: |
      define i1 @BGT(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = icmp sgt i\xlen\ %0, %1
        ret i1 %3
      }
  BLE:
    func: |
      define i1 @BLE(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = icmp sle i\xlen\ %0, %1
        ret i1 %3
      }
  BGE:
    func: |
      define i1 @BGE(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = icmp sge i\xlen\ %0, %1
        ret i1 %3
      }
  BLTU:
    func: |
      define i1 @BLTU(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = icmp ult i\xlen\ %0, %1
        ret i1 %3
      }
  BGEU:
    func: |
      define i1 @BGEU(i\xlen\ noundef signext %0, i\xlen\ noundef signext %1) {
        %3 = icmp uge i\xlen\ %0, %1
        ret i1 %3
      }
  FENCE:
    func: |
      define void @FENCE(i\xlen\ noundef signext %pred, i\xlen\ noundef signext %succ) {
        fence acq_rel
        ret void
      }
  FENCE_TSO:
    func: |
      define void @FENCE_TSO(i\xlen\ noundef signext %pred, i\xlen\ noundef signext %succ) {
        fence acq_rel
        ret void
      }
  EBREAK:
    func: |
      define void @EBREAK() {
        call void @llvm.debugtrap()
        ret void
      }
