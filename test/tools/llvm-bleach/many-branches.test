# RUN: %bin/llvm-bleach %S/inputs/many-branches.mir \
# RUN:   --instructions=%S/inputs/logical.yaml | filecheck %s

# CHECK: define void @SnippyFunction() {
# CHECK-NEXT:   %1 = call i64 @XOR(i64 %6, i64 %10)
# CHECK-NEXT:   %2 = call i64 @XOR(i64 %11, i64 %28)
# CHECK-NEXT:   %3 = call i64 @ADD(i64 %0, i64 %0)
# CHECK-NEXT:   %4 = call i64 @ADD(i64 %0, i64 %0)
# CHECK-NEXT:   br label %5
# CHECK-NEXT:
# CHECK-NEXT: 5:                                                ; preds = %5, %0
# CHECK-NEXT:   %6 = call i64 @ADD(i64 %27, i64 %23)
# CHECK-NEXT:   %7 = call i64 @MULW(i64 %1, i64 %4)
# CHECK-NEXT:   %8 = call i64 @ADD(i64 %3, i64 %0)
# CHECK-NEXT:   %9 = call i64 @SRL(i64 %8, i64 %2)
# CHECK-NEXT:   %10 = icmp eq i64 %9, %0
# CHECK-NEXT:   br i1 %10, label %5, label %11
# CHECK-NEXT:   br label %11
# CHECK-NEXT:
# CHECK-NEXT: 11:                                               ; preds = %5, %5
# CHECK-NEXT:   %12 = call i64 @AND(i64 %9, i64 %27)
# CHECK-NEXT:   %13 = call i64 @XOR(i64 %28, i64 %2)
# CHECK-NEXT:   %14 = call i64 @ADD(i64 %0, i64 %0)
# CHECK-NEXT:   %15 = call i64 @ADD(i64 %0, i64 %0)
# CHECK-NEXT:   br label %16
# CHECK-NEXT:
# CHECK-NEXT: 16:                                               ; preds = %16, %11
# CHECK-NEXT:   %17 = call i64 @SLT(i64 %9, i64 %26)
# CHECK-NEXT:   %18 = call i64 @SLT(i64 %7, i64 %8)
# CHECK-NEXT:   %19 = call i64 @ADD(i64 %14, i64 %0)
# CHECK-NEXT:   %20 = call i64 @SRL(i64 %19, i64 %2)
# CHECK-NEXT:   %21 = icmp eq i64 %20, %0
# CHECK-NEXT:   br i1 %21, label %16, label %22
# CHECK-NEXT:   br label %22
# CHECK-NEXT:
# CHECK-NEXT: 22:                                               ; preds = %16, %16
# CHECK-NEXT:   %23 = call i64 @ADD(i64 %0, i64 %7)
# CHECK-NEXT:   %24 = call i64 @AND(i64 %8, i64 %21)
# CHECK-NEXT:   %25 = icmp eq i64 %15, %13
# CHECK-NEXT:   br i1 %25, label %33, label %26
# CHECK-NEXT:   br label %26
# CHECK-NEXT:
# CHECK-NEXT: 26:                                               ; preds = %22, %22
# CHECK-NEXT:   %27 = call i64 @SLT(i64 %19, i64 %8)
# CHECK-NEXT:   %28 = icmp slt i64 %9, %26
# CHECK-NEXT:   br i1 %28, label %29, label %29
# CHECK-NEXT:   br label %29
# CHECK-NEXT:
# CHECK-NEXT: 29:                                               ; preds = %26, %26, %26
# CHECK-NEXT:   %30 = call i64 @MULW(i64 %20, i64 %22)
# CHECK-NEXT:   %31 = call i64 @XOR(i64 %17, i64 %2)
# CHECK-NEXT:   %32 = icmp eq i64 %19, %7
# CHECK-NEXT:   br i1 %32, label %33, label %33
# CHECK-NEXT:   br label %33
# CHECK-NEXT:
# CHECK-NEXT: 33:                                               ; preds = %29, %29, %29, %22
# CHECK-NEXT:   %34 = call i64 @ADD(i64 %1, i64 %8)
# CHECK-NEXT:   %35 = call i64 @ADD(i64 %24, i64 %30)
# CHECK-NEXT: }

