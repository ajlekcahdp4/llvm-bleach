# RUN: %bin/llvm-bleach %S/inputs/logical.mir \
# RUN:   --instructions=%S/inputs/logical.yaml -noinline-instr | FileCheck %s

# CHECK: define void @foo(ptr %0) {
# CHECK-NEXT:   %GPRS = getelementptr %register_state, ptr %0, i64 0
# CHECK:   [[X10ADDR:%[0-9]+]] = getelementptr inbounds [32 x i64], ptr %GPRS, i64 0, i64 10
# CHECK-NEXT:   [[X10:%[0-9]+]] = load i64, ptr [[X10ADDR]], align 8
# CHECK:   [[X11ADDR:%[0-9]+]] = getelementptr inbounds [32 x i64], ptr %GPRS, i64 0, i64 11
# CHECK-NEXT:   [[X11:%[0-9]+]] = load i64, ptr [[X11ADDR]], align 8
# CHECK:   [[X12ADDR:%[0-9]+]] = getelementptr inbounds [32 x i64], ptr %GPRS, i64 0, i64 12
# CHECK-NEXT:   [[X12:%[0-9]+]] = load i64, ptr [[X12ADDR]], align 8

# CHECK:   [[X12_1:%[0-9]+]] = call i64 @XOR(i64 [[X12]], i64 [[X10]])
# CHECK-NEXT:   [[X12_2:%[0-9]+]] = call i64 @SLL(i64 [[X12_1]], i64 [[X10]])
# CHECK-NEXT:   [[X13:%[0-9]+]] = call i64 @SRL(i64 [[X10]], i64 [[X12_2]])
# CHECK-NEXT:   [[X11_1:%[0-9]+]] = call i64 @ADD(i64 [[X13]], i64 [[X11]])
# CHECK-NEXT:   [[X10_1:%[0-9]+]] = call i64 @OR(i64 [[X11_1]], i64 [[X10]])
# CHECK-NEXT:   [[X10_2:%[0-9]+]] = call i64 @SUB(i64 [[X12_2]], i64 [[X10_1]])

# CHECK:   %GPRS1 = getelementptr %register_state, ptr %0, i64 0
# CHECK:   [[X10DEST:%[0-9]+]] = getelementptr inbounds [32 x i64], ptr %GPRS1, i64 0, i64 10
# CHECK-NEXT:   store i64 [[X10_2]], ptr [[X10DEST]], align 8
# CHECK:   [[X11DEST:%[0-9]+]] = getelementptr inbounds [32 x i64], ptr %GPRS1, i64 0, i64 11
# CHECK-NEXT:   store i64 [[X11_1]], ptr [[X11DEST]], align 8
# CHECK:   [[X12DEST:%[0-9]+]] = getelementptr inbounds [32 x i64], ptr %GPRS1, i64 0, i64 12
# CHECK-NEXT:   store i64 [[X12_2]], ptr [[X12DEST]], align 8
# CHECK:   [[X13DEST:%[0-9]+]] = getelementptr inbounds [32 x i64], ptr %GPRS1, i64 0, i64 13
# CHECK-NEXT:   store i64 [[X13]], ptr [[X13DEST]], align 8
