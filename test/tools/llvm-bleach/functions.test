# RUN: %bin/llvm-bleach %S/inputs/functions.mir \
# RUN:   --instructions=%S/inputs/logical.yaml | filecheck %s

# SnippyFunction has 4 calls to fun2. Check that all calls are
# embraced with storing registers to state and loading afterwards

# CHECK: define void @SnippyFunction(ptr %0) {

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

#CHECK-NOT: call

# Now 6 calls from fun1
# CHECK: define void @fun1(ptr %0) {

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun2(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-NOT: call

# 4 calls from fun2 to fun3
# CHECK: define void @fun2(ptr %0) {

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun3(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun3(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun3(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

# CHECK-32:   store i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8
# CHECK:   call void @fun3(ptr %0)
# CHECK-32:   load i64 {{%[0-9]+}}, ptr {{%[0-9]+}}, align 8

